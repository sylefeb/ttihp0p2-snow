// SL 2024-08-27 @sylefeb
// ========================================================
// MIT license
// ========================================================

// include VGA signal generator
$include('../common/vga.si')

// -------------------------

$$ W = 1024
$$ H = 768

unit vga_demo(
  output! uint2 video_r,
  output! uint2 video_g,
  output! uint2 video_b,
  output  uint1 video_hs,
  output  uint1 video_vs,
) {

  vga vga(
    vga_hs :> video_hs,
    vga_vs :> video_vs,
  );

  uint16 frame(0); // frame counter
  uint1  prev_vs(0);
  uint1  prev_hs(0);
  uint10 pix_x(0);
$$N = 2
$$for i=0,N-1 do
  uint16 modulo_$i$(0);
  uint12 rand_$i$(0);
$$end

  always {

    pix_x   = prev_hs & ~vga.vga_hs ? 0 : pix_x+1;
    prev_hs = vga.vga_hs;

    // shading pipeline
    {
      // pipeline start

      uint10  x = vga.vga_x;
      uint10  y = vga.vga_y;
      uint2   s = 0;

$$for i=0,N-1 do
    ->
      rand_$i$ = (pix_x == (frame>>$i$)-modulo_$i$)
               ? 12d$1+i*103$
               : (rand_$i$ * 12d$4091$ + 12d$3331+i*313$);
      uint2  speed  = rand_$i$[10,2];
    //->
      uint10 dotpos = (frame >> speed) + rand_$i$;
    //->
      uint2 l = (dotpos[0,8] == y[0,8])
              ? (speed == 2b11 ? 2b01 : ~speed)
              : 0;
      s = s | l;
      // s = l;
$$end
      video_r = vga.active ? s : 2b0;
      video_g = vga.active ? s : 2b0;
      video_b = vga.active ? s : 2b0;

    }

    // count frames
    uint1 frame_tick = (prev_vs & ~vga.vga_vs); // start of vsynch
$$for i=0,N-1 do
    modulo_$i$ = frame_tick
               ? ((frame>>$i$)-modulo_$i$ == 800 ? (modulo_$i$ + 801) : modulo_$i$)
               : modulo_$i$;
$$end
    frame    = frame_tick ? (frame + 1) : frame;
    prev_vs  = vga.vga_vs;

    if (frame_tick) {
      __display("frame %d",frame);
    }

  }

}

// -------------------------
